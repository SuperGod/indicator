// this file was generated by gomacro command: import _i "github.com/SuperGod/indicator"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package indicator

import (
	r "reflect"
	"github.com/cosmos72/gomacro/imports"
)

// reflection: allow interpreted code to import "github.com/SuperGod/indicator"
func init() {
	imports.Packages["github.com/SuperGod/indicator"] = imports.Package{
	Name: "indicator",
	Binds: map[string]r.Value{
		"ExtraIndicators":	r.ValueOf(&ExtraIndicators).Elem(),
		"NewBoll":	r.ValueOf(NewBoll),
		"NewCommonIndicator":	r.ValueOf(NewCommonIndicator),
		"NewCrossTool":	r.ValueOf(NewCrossTool),
		"NewEMA":	r.ValueOf(NewEMA),
		"NewJsonIndicator":	r.ValueOf(NewJsonIndicator),
		"NewMACD":	r.ValueOf(NewMACD),
		"NewMACDWithSMA":	r.ValueOf(NewMACDWithSMA),
		"NewMAGroup":	r.ValueOf(NewMAGroup),
		"NewMixed":	r.ValueOf(NewMixed),
		"NewRSI":	r.ValueOf(NewRSI),
		"NewSMA":	r.ValueOf(NewSMA),
		"NewSMMA":	r.ValueOf(NewSMMA),
		"NewStoch":	r.ValueOf(NewStoch),
		"NewStochRSI":	r.ValueOf(NewStochRSI),
		"RegisterIndicator":	r.ValueOf(RegisterIndicator),
	}, Types: map[string]r.Type{
		"Boll":	r.TypeOf((*Boll)(nil)).Elem(),
		"CommonIndicator":	r.TypeOf((*CommonIndicator)(nil)).Elem(),
		"CrossTool":	r.TypeOf((*CrossTool)(nil)).Elem(),
		"Crosser":	r.TypeOf((*Crosser)(nil)).Elem(),
		"EMA":	r.TypeOf((*EMA)(nil)).Elem(),
		"Indicator":	r.TypeOf((*Indicator)(nil)).Elem(),
		"JsonIndicator":	r.TypeOf((*JsonIndicator)(nil)).Elem(),
		"MABase":	r.TypeOf((*MABase)(nil)).Elem(),
		"MACD":	r.TypeOf((*MACD)(nil)).Elem(),
		"MAGroup":	r.TypeOf((*MAGroup)(nil)).Elem(),
		"Mixed":	r.TypeOf((*Mixed)(nil)).Elem(),
		"NewCommonIndicatorFunc":	r.TypeOf((*NewCommonIndicatorFunc)(nil)).Elem(),
		"RSI":	r.TypeOf((*RSI)(nil)).Elem(),
		"SMA":	r.TypeOf((*SMA)(nil)).Elem(),
		"SMMA":	r.TypeOf((*SMMA)(nil)).Elem(),
		"Stoch":	r.TypeOf((*Stoch)(nil)).Elem(),
		"StochRSI":	r.TypeOf((*StochRSI)(nil)).Elem(),
		"Updater":	r.TypeOf((*Updater)(nil)).Elem(),
	}, Proxies: map[string]r.Type{
		"CommonIndicator":	r.TypeOf((*P_github_com_SuperGod_indicator_CommonIndicator)(nil)).Elem(),
		"Crosser":	r.TypeOf((*P_github_com_SuperGod_indicator_Crosser)(nil)).Elem(),
		"Indicator":	r.TypeOf((*P_github_com_SuperGod_indicator_Indicator)(nil)).Elem(),
		"Updater":	r.TypeOf((*P_github_com_SuperGod_indicator_Updater)(nil)).Elem(),
	}, Wrappers: map[string][]string{
		"EMA":	[]string{"Result",},
		"SMA":	[]string{"Result",},
		"SMMA":	[]string{"Result",},
	}, 
	}
}

// --------------- proxy for github.com/SuperGod/indicator.CommonIndicator ---------------
type P_github_com_SuperGod_indicator_CommonIndicator struct {
	Object	interface{}
	Indicator_	func(interface{}) map[string]float64
	Result_	func(interface{}) float64
	Update_	func(_proxy_obj_ interface{}, price float64) 
}
func (P *P_github_com_SuperGod_indicator_CommonIndicator) Indicator() map[string]float64 {
	return P.Indicator_(P.Object)
}
func (P *P_github_com_SuperGod_indicator_CommonIndicator) Result() float64 {
	return P.Result_(P.Object)
}
func (P *P_github_com_SuperGod_indicator_CommonIndicator) Update(price float64)  {
	P.Update_(P.Object, price)
}

// --------------- proxy for github.com/SuperGod/indicator.Crosser ---------------
type P_github_com_SuperGod_indicator_Crosser struct {
	Object	interface{}
	FastResult_	func(interface{}) float64
	SlowResult_	func(interface{}) float64
	Update_	func(_proxy_obj_ interface{}, price float64) 
}
func (P *P_github_com_SuperGod_indicator_Crosser) FastResult() float64 {
	return P.FastResult_(P.Object)
}
func (P *P_github_com_SuperGod_indicator_Crosser) SlowResult() float64 {
	return P.SlowResult_(P.Object)
}
func (P *P_github_com_SuperGod_indicator_Crosser) Update(price float64)  {
	P.Update_(P.Object, price)
}

// --------------- proxy for github.com/SuperGod/indicator.Indicator ---------------
type P_github_com_SuperGod_indicator_Indicator struct {
	Object	interface{}
	Result_	func(interface{}) float64
	Update_	func(_proxy_obj_ interface{}, price float64) 
}
func (P *P_github_com_SuperGod_indicator_Indicator) Result() float64 {
	return P.Result_(P.Object)
}
func (P *P_github_com_SuperGod_indicator_Indicator) Update(price float64)  {
	P.Update_(P.Object, price)
}

// --------------- proxy for github.com/SuperGod/indicator.Updater ---------------
type P_github_com_SuperGod_indicator_Updater struct {
	Object	interface{}
	Update_	func(_proxy_obj_ interface{}, price float64) 
}
func (P *P_github_com_SuperGod_indicator_Updater) Update(price float64)  {
	P.Update_(P.Object, price)
}
